<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2019 vistart
 * @license https://vistart.me/license/
 */

namespace rhoone\library\providers\huiwen\models\mongodb;

use rhosocial\base\models\models\BaseMongoEntityModel;
use Yii;

/**
 * This class is used to save the state of the MARC pipeline.
 *
 * @property string $marc_no
 * @property bool $empty
 * @property bool $error_downloading
 * @property string $reason_downloading
 * @property bool $error_analyzing
 * @property string $reason_analyzing
 * @property bool $error_indexing
 * @property string $reason_indexing
 * @property int $last_downloaded_content_version
 * @property int $version
 * @property-read DownloadedContent $downloadedContent
 * @property-read MarcInfo[] $marcInfos
 * @property-read MarcCopy[] $marcCopies
 * @property-read MarcStatus $marcStatus
 * @package rhoone\library\providers\huiwen\models\mongodb
 */
class MarcNo extends BaseMongoEntityModel
{
    public $enableIP = 0;

    /**
     * @var string
     */
    public $marcStatusClass = MarcStatus::class;

    /**
     * @var string
     */
    public $marcInfoClass = MarcInfo::class;

    /**
     * @var string
     */
    public $marcCopyClass = MarcCopy::class;

    /**
     * @var string
     */
    public $downloadedContentClass = DownloadedContent::class;

    /**
     * {@inheritdoc}
     */
    public static function collectionName()
    {
        throw new NotSupportedException("This method has not been implemented yet. Please specify collection name for your collection class.");
    }

    /**
     * {@inheritdoc}
     */
    public function attributes()
    {
        $parent = parent::attributes();
        return array_merge($parent, [
            'marc_no', 'empty', 'error_downloading', 'reason_downloading', 'error_analyzing', 'reason_analyzing',
            'error_indexing', 'reason_indexing', 'last_downloaded_content_version', 'version'
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public static function primaryKey()
    {
        $noInit = static::buildNoInitModel();
        return [$noInit->guidAttribute, $noInit->idAttribute];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $parent = parent::rules();
        return array_merge($parent,[
            [['marc_no'], 'required'],
            [['marc_no', 'reason_downloading', 'reason_analyzing', 'reason_indexing'], 'string'],
            [['empty', 'error_downloading', 'error_analyzing', 'error_indexing'], 'default', 'value' => false],
            [['empty', 'error_downloading', 'error_analyzing', 'error_indexing'], 'boolean', 'trueValue' => true, 'falseValue' => false],
            [['reason_downloading', 'reason_analyzing', 'reason_indexing'], 'default', 'value' => ''],
            [['version', 'last_downloaded_content_version'], 'integer', 'min' => 0],
            [['version', 'last_downloaded_content_version'], 'default', 'value' => 0],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            '_id' => Yii::t('app', 'ID'),
            'guid' => Yii::t('app', 'Guid'),
            'marc_no' => Yii::t('app', 'Marc No'),
            'empty' => Yii::t('app', 'Empty'),
            'error_downloading' => Yii::t('app', 'Error Downloading'),
            'reason_downloading' => Yii::t('app', 'Reason Downloading'),
            'error_analyzing' => Yii::t('app', 'Error Analyzing'),
            'reason_downloading' => Yii::t('app', 'Reason Analyzing'),
            'error_indexing' => Yii::t('app', 'Error Indexing'),
            'reason_indexing' => Yii::t('app', 'Reason Indexing'),
            'last_downloaded_content_version' => Yii::t('app', 'Last Downloaded Content Version'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'version' => Yii::t('app', 'Version'),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function optimisticLock()
    {
        return 'version';
    }

    /**
     * {@inheritdoc}
     */
    public function init()
    {
        $this->queryClass = MarcNoQuery::class;
        return parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return DownloadedContentQuery
     */
    public function getDownloadedContent()
    {
        return $this->hasOne($this->downloadedContentClass, ['marc_no' => 'marc_no'])->inverseOf('marcNo');
    }

    /**
     * @return MarcInfoQuery
     */
    public function getMarcInfos()
    {
        return $this->hasMany($this->marcInfoClass, ['marc_no' => 'marc_no']);
    }

    /**
     * @return MarcCopyQuery
     */
    public function getMarcCopies()
    {
        return $this->hasMany($this->marcCopyClass, ['marc_no' => 'marc_no']);
    }

    /**
     * @return MarcStatusQuery
     */
    public function getMarcStatus()
    {
        return $this->hasOne($this->marcStatusClass, ['marc_no' => 'marc_no']);
    }

    /**
     * @param string $marc_on
     * @return MarcNo
     */
    public static function getOneOrCreate(string $marc_no)
    {
        $marcNo = static::find()->marcNo($marc_no)->one();
        if (!$marcNo) {
            $marcNo = new static(['marc_no' => $marc_no]);
        }
        return $marcNo;
    }

    /**
     * @return MarcNoQuery
     */
    public static function find()
    {
        return parent::find();
    }
}
